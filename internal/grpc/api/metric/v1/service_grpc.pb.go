// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: service.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricService_UpdateMetric_FullMethodName = "/collector.metric.v1.MetricService/UpdateMetric"
)

// MetricServiceClient is the client API for MetricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricServiceClient interface {
	UpdateMetric(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateMetricRequest, UpdateMetricResponse], error)
}

type metricServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricServiceClient(cc grpc.ClientConnInterface) MetricServiceClient {
	return &metricServiceClient{cc}
}

func (c *metricServiceClient) UpdateMetric(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateMetricRequest, UpdateMetricResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetricService_ServiceDesc.Streams[0], MetricService_UpdateMetric_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateMetricRequest, UpdateMetricResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetricService_UpdateMetricClient = grpc.ClientStreamingClient[UpdateMetricRequest, UpdateMetricResponse]

// MetricServiceServer is the server API for MetricService service.
// All implementations must embed UnimplementedMetricServiceServer
// for forward compatibility.
type MetricServiceServer interface {
	UpdateMetric(grpc.ClientStreamingServer[UpdateMetricRequest, UpdateMetricResponse]) error
	mustEmbedUnimplementedMetricServiceServer()
}

// UnimplementedMetricServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricServiceServer struct{}

func (UnimplementedMetricServiceServer) UpdateMetric(grpc.ClientStreamingServer[UpdateMetricRequest, UpdateMetricResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateMetric not implemented")
}
func (UnimplementedMetricServiceServer) mustEmbedUnimplementedMetricServiceServer() {}
func (UnimplementedMetricServiceServer) testEmbeddedByValue()                       {}

// UnsafeMetricServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricServiceServer will
// result in compilation errors.
type UnsafeMetricServiceServer interface {
	mustEmbedUnimplementedMetricServiceServer()
}

func RegisterMetricServiceServer(s grpc.ServiceRegistrar, srv MetricServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetricServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricService_ServiceDesc, srv)
}

func _MetricService_UpdateMetric_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricServiceServer).UpdateMetric(&grpc.GenericServerStream[UpdateMetricRequest, UpdateMetricResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetricService_UpdateMetricServer = grpc.ClientStreamingServer[UpdateMetricRequest, UpdateMetricResponse]

// MetricService_ServiceDesc is the grpc.ServiceDesc for MetricService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collector.metric.v1.MetricService",
	HandlerType: (*MetricServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateMetric",
			Handler:       _MetricService_UpdateMetric_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
